Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import json
# Can get the data indirectly via the text and then load json text....
my_quake_data = json.loads(quakes.text) # Section 3.1 - structured data

# Requests also has a built in json parser (note this gives exactly the same result as 'my_quake_data')
requests_json = quakes.json()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mJSONDecodeError[0m                           Traceback (most recent call last)
Cell [0;32mIn[19], line 3[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mjson[39;00m
[1;32m      2[0m [38;5;66;03m# Can get the data indirectly via the text and then load json text....[39;00m
[0;32m----> 3[0m my_quake_data [38;5;241m=[39m [43mjson[49m[38;5;241;43m.[39;49m[43mloads[49m[43m([49m[43mquakes[49m[38;5;241;43m.[39;49m[43mtext[49m[43m)[49m [38;5;66;03m# Section 3.1 - structured data[39;00m
[1;32m      5[0m [38;5;66;03m# Requests also has a built in json parser (note this gives exactly the same result as 'my_quake_data')[39;00m
[1;32m      6[0m requests_json [38;5;241m=[39m quakes[38;5;241m.[39mjson()

File [0;32m/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/json/__init__.py:357[0m, in [0;36mloads[0;34m(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)[0m
[1;32m    352[0m     [38;5;28;01mdel[39;00m kw[[38;5;124m'[39m[38;5;124mencoding[39m[38;5;124m'[39m]
[1;32m    354[0m [38;5;28;01mif[39;00m ([38;5;28mcls[39m [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m object_hook [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m
[1;32m    355[0m         parse_int [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m parse_float [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m
[1;32m    356[0m         parse_constant [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m object_pairs_hook [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m kw):
[0;32m--> 357[0m     [38;5;28;01mreturn[39;00m [43m_default_decoder[49m[38;5;241;43m.[39;49m[43mdecode[49m[43m([49m[43ms[49m[43m)[49m
[1;32m    358[0m [38;5;28;01mif[39;00m [38;5;28mcls[39m [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    359[0m     [38;5;28mcls[39m [38;5;241m=[39m JSONDecoder

File [0;32m/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/json/decoder.py:337[0m, in [0;36mJSONDecoder.decode[0;34m(self, s, _w)[0m
[1;32m    332[0m [38;5;28;01mdef[39;00m [38;5;21mdecode[39m([38;5;28mself[39m, s, _w[38;5;241m=[39mWHITESPACE[38;5;241m.[39mmatch):
[1;32m    333[0m [38;5;250m    [39m[38;5;124;03m"""Return the Python representation of ``s`` (a ``str`` instance[39;00m
[1;32m    334[0m [38;5;124;03m    containing a JSON document).[39;00m
[1;32m    335[0m 
[1;32m    336[0m [38;5;124;03m    """[39;00m
[0;32m--> 337[0m     obj, end [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mraw_decode[49m[43m([49m[43ms[49m[43m,[49m[43m [49m[43midx[49m[38;5;241;43m=[39;49m[43m_w[49m[43m([49m[43ms[49m[43m,[49m[43m [49m[38;5;241;43m0[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mend[49m[43m([49m[43m)[49m[43m)[49m
[1;32m    338[0m     end [38;5;241m=[39m _w(s, end)[38;5;241m.[39mend()
[1;32m    339[0m     [38;5;28;01mif[39;00m end [38;5;241m!=[39m [38;5;28mlen[39m(s):

File [0;32m/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/json/decoder.py:355[0m, in [0;36mJSONDecoder.raw_decode[0;34m(self, s, idx)[0m
[1;32m    353[0m     obj, end [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mscan_once(s, idx)
[1;32m    354[0m [38;5;28;01mexcept[39;00m [38;5;167;01mStopIteration[39;00m [38;5;28;01mas[39;00m err:
[0;32m--> 355[0m     [38;5;28;01mraise[39;00m JSONDecodeError([38;5;124m"[39m[38;5;124mExpecting value[39m[38;5;124m"[39m, s, err[38;5;241m.[39mvalue) [38;5;28;01mfrom[39;00m [38;5;28mNone[39m
[1;32m    356[0m [38;5;28;01mreturn[39;00m obj, end

[0;31mJSONDecodeError[0m: Expecting value: line 1 column 1 (char 0)
JSONDecodeError: Expecting value: line 1 column 1 (char 0)

